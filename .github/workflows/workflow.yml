name: Build and release pipeline

on:
  pull_request:
  push:
    branches: ["main"]
    tags: ["*"]
  schedule:
    - cron: '0 4 * * *'

jobs:
  static-analysis:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        check:
          - name: Check code-formatting
            run: poetry run black --check .
          - name: Check import sorting
            run: poetry run isort --check-only .
          - name: pylint
            run: poetry run pylint plato
          - name: Check static typing
            run: poetry run mypy plato tests

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
        
      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip
      - uses: actions/cache@v2
        with:
          path: .venv
          key: ${{ runner.os }}-py3.9-venv-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-py3.9-venv-

      - uses: ./.github/actions/setup-project

      - name: ${{ matrix.check.name }}
        run: ${{ matrix.check.run }}
    
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9]
        include:
          - python-version: 3.9
            coverage: true

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
        
      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip
      - uses: actions/cache@v2
        with:
          path: .venv
          key: ${{ runner.os }}-py${{ matrix.python-version }}-venv-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-py${{ matrix.python-version }}-venv-

      - uses: ./.github/actions/setup-project

      - name: Test with pytest
        run: poetry run pytest --verbose
        if: ${{ !matrix.coverage }}
      - name: Test and measure coverage with pytest
        run: poetry run pytest --verbose --cov=plato --cov-report=xml
        if: ${{ matrix.coverage }}
      - uses: codecov/codecov-action@v1
      
  documentation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip
      - uses: actions/cache@v2
        with:
          path: .venv
          key: ${{ runner.os }}-py3.9-venv-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-py3.9-venv-

      - uses: ./.github/actions/setup-project
            
      - name: Check documentated arguments match function signature
        run: find plato -name "*.py" | xargs poetry run darglint
        
      - name: Build documentation
        run: poetry run make html
        working-directory: docs 

      - name: Test examples
        run: poetry run make doctest
        working-directory: docs 

      - name: Set version_name
        id: version_name
        run: echo ::set-output name=version_name::${GITHUB_REF#refs/*/}

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/_build
          destination_dir: ./docs/en/${{ steps.version_name.outputs.version_name }}
          keep_files: true
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))