name: Build and release pipeline

on:
  pull_request:
  push:
    branches: ["main"]
    tags: ["*"]
  schedule:
    - cron: '0 4 * * *'

jobs:
  static-analysis:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        check:
          - name: Check code-formatting
            run: poetry run black --check .
          - name: Check import sorting
            run: poetry run isort --check-only .
          - name: pylint
            run: poetry run pylint plato tests
          - name: Check static typing
            run: poetry run mypy plato tests
          - name: Check commit message format
            run: '[[ $(git rev-list --count origin/main..HEAD) == 0 ]] || poetry run cz check --rev-range origin/main..HEAD'

    steps:
      - uses: actions/checkout@v2
      - run: git fetch --no-tags --prune --depth=1 origin +refs/heads/main:refs/remotes/origin/main

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
        
      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip
      - uses: actions/cache@v2
        with:
          path: .venv
          key: ${{ runner.os }}-py3.9-venv-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-py3.9-venv-

      - uses: ./.github/actions/setup-project

      - name: ${{ matrix.check.name }}
        run: ${{ matrix.check.run }}
    
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9]
        include:
          - python-version: 3.9
            coverage: true

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
        
      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip
      - uses: actions/cache@v2
        with:
          path: .venv
          key: ${{ runner.os }}-py${{ matrix.python-version }}-venv-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-py${{ matrix.python-version }}-venv-

      - uses: ./.github/actions/setup-project

      - name: Test with pytest
        run: poetry run pytest --verbose
        if: ${{ !matrix.coverage }}
      - name: Test and measure coverage with pytest
        run: poetry run pytest --verbose --cov=plato --cov-report=xml
        if: ${{ matrix.coverage }}
      - uses: codecov/codecov-action@v1
      
  documentation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip
      - uses: actions/cache@v2
        with:
          path: .venv
          key: ${{ runner.os }}-py3.9-venv-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-py3.9-venv-

      - uses: ./.github/actions/setup-project
            
      - name: Check documentated arguments match function signature
        run: find plato -name "*.py" | xargs poetry run darglint
        
      - name: Build documentation
        run: poetry run make html SPHINXOPTS="-W"
        working-directory: docs 
        
      - name: Check links
        run: poetry run make linkcheck
        working-directory: docs

      - name: Test examples
        run: poetry run make doctest
        working-directory: docs 

      - name: Set version_name
        id: version_name
        run: echo ::set-output name=version_name::${GITHUB_REF#refs/*/}

      - name: Deploy documentation
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/_build/html
          destination_dir: ./docs/en/${{ steps.version_name.outputs.version_name }}
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
        
      - name: Checkout gh-pages branch
        uses: actions/checkout@v2
        with:
          ref: gh-pages
          path: gh-pages
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
        
      - name: Update versions.json manifest
        run: python docs/versions_manifest.py --link-stable --output gh-pages/docs/versions.json gh-pages/docs/en
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))

      - name: Deploy versions.json manifest
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./gh-pages
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
      
        
  release:
    runs-on: ubuntu-latest
    needs: [static-analysis, test, documentation]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip
      - uses: actions/cache@v2
        with:
          path: .venv
          key: ${{ runner.os }}-py3.9-venv-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-py3.9-venv-

      - uses: ./.github/actions/setup-project
            
      - name: Publish to PyPI
        run: poetry publish --build
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}

      - name: Set version_name
        id: version_name
        run: echo ::set-output name=version_name::${GITHUB_REF#refs/*/}
        
      - name: Extract changelog
        id: changelog
        run: sed -n '/## ${{ steps.version_name.outputs.version_name }} /,/^## v/{/^## v/!p;}' CHANGELOG.md > release-body.md
          
      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          body_path: release-body.md
          tag_name: ${{ steps.version_name.outputs.version_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}